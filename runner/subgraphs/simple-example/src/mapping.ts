
import { call, NewBlockEvent, storeRecord, printA, Network } from "../../graph";

/***
 * Generated
 * Definitions here would be auto-generated by `graph codegen`
 */
export class BlockEntity {
  id: string;
  height: number;
  time: Date;
  myNote: string;

  constructor(...args: any[]) {
    Object.assign(this, args);
  }
}

/**
 * Mapping
 */
const GET_BLOCK = `query GetBlock($height: Int) {
  block( $height: Int = 0 ) {
    height
    time
    id
  }
}`;

/**
 * This function is defined in the subgraph.yaml.
 * 
 * Ex:
 * ```yaml
 * # ...
 * mapping:
 *  kind: cosmos/blocks
 *  apiVersion: 0.0.1
 *  language: wasm/assemblyscript
 *  blockHandlers:
 *    - function: handleNewBlock
 * ```
 */
function handleNewCosmosBlock(newBlockEvent: NewBlockEvent) {
  printA('newEventData: ' + JSON.stringify(newBlockEvent));

  const {error, data} = call(Network.COSMOS, GET_BLOCK, { height: newBlockEvent.height }, "0.0.1");

  if (error) {
    printA('GQL call error: ' + JSON.stringify(error));
    return;
  }

  if (!data) {
    printA('GQL call returned no data');
    return;
  }

  printA('GQL call data: ' + JSON.stringify(data));

  const { height, id, time } = data;
  const entity = new BlockEntity(height, id, time, "ok");

  printA('Entity: ' + JSON.stringify(entity));

  // replace with `entity.save()` for graph-ts
  storeRecord("SubgraphStoreBlock", entity);
}
