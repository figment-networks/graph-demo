"use strict";
exports.__esModule = true;
var graph_1 = require("../../graph");
/***
 * Generated
 * Definitions here would be auto-generated by `graph codegen`
 */
var TransactionEntity = /** @class */ (function () {
    function TransactionEntity(args) {
        Object.assign(this, args);
    }
    TransactionEntity.prototype.save = function () {
        return graph_1.store.save("Transaction", this);
    };
    return TransactionEntity;
}());
var BlockEntity = /** @class */ (function () {
    function BlockEntity(args) {
        Object.assign(this, args);
    }
    BlockEntity.prototype.save = function () {
        return graph_1.store.save("Block", this);
    };
    return BlockEntity;
}());
/**
 * Mapping
 */
var GET_BLOCK = "query GetBlock($height: Int = 0, $chain_id: String = \"mainnet\") {\n  block( height: $height, chain_id: $chain_id) {\n    hash\n    height\n    time\n  }\n}";
/**
 * This function is defined in the subgraph.yaml.
 *
 * Ex:
 * ```yaml
 * # ...
 * mapping:
 *  kind: cosmos/blocks
 *  apiVersion: 0.0.1
 *  language: wasm/assemblyscript
 *  transactionHandlers:
 *    - function: handleTransaction
 *  blockHandlers:
 *    - function: handleBlock
 * ```
 */
function handleBlock(newBlockEvent) {
    graph_1.log.debug('newBlockEvent: ' + JSON.stringify(newBlockEvent));
    var _a = graph_1.graphql.call("cosmos", GET_BLOCK, { height: newBlockEvent.height, chain_id: "cosmoshub-4" }, "0.0.1"), error = _a.error, data = _a.data;
    if (error) {
        graph_1.log.debug('GQL call error: ' + JSON.stringify(error));
        return;
    }
    if (!data) {
        graph_1.log.debug('GQL call returned no data');
        return;
    }
    graph_1.log.debug('GQL call data: ' + JSON.stringify(data));
    var entity = new BlockEntity({ hash: data.block.hash, height: data.block.height, myNote: "some additional data", time: data.block.time });
    graph_1.log.debug('Entity: ' + JSON.stringify(entity));
    var storeErr = entity.save();
    if (storeErr !== undefined) {
        graph_1.log.debug('Error storing block: ' + JSON.stringify(storeErr));
    }
    else {
        graph_1.log.debug('Block stored: ' + JSON.stringify(newBlockEvent));
    }
}
var GET_TRANSACTIONS = "query GetTransactions($hash: String, $chain_id: String = \"mainnet\") {\n  transaction(hash: $hash, chain_id: $chain_id) {\n    hash\n    height\n    time\n  }\n}";
function handleTransaction(newTxnEvent) {
    graph_1.log.debug('newTxnEvent: ' + JSON.stringify(newTxnEvent));
    var _a = graph_1.graphql.call("cosmos", GET_TRANSACTIONS, { hash: newTxnEvent.hash, chain_id: "cosmoshub-4" }, "0.0.1"), error = _a.error, data = _a.data;
    if (error) {
        graph_1.log.debug('GQL call error: ' + JSON.stringify(error));
        return;
    }
    if (!data) {
        graph_1.log.debug('GQL call returned no data');
        return;
    }
    graph_1.log.debug('GQL call data: ' + JSON.stringify(data));
    var tx = data.transaction[0];
    var entity = new TransactionEntity({ hash: tx.hash, height: tx.height, myNote: "some additional data", time: tx.time });
    graph_1.log.debug('Entity: ' + JSON.stringify(entity));
    var storeErr = entity.save();
    if (storeErr !== undefined) {
        graph_1.log.debug('Error storing transaction: ' + JSON.stringify(storeErr));
    }
    else {
        graph_1.log.debug('Transaction stored: ' + JSON.stringify(newTxnEvent));
    }
}
